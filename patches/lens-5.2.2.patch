diff --git a/src/Control/Lens/Internal/FieldTH.hs b/src/Control/Lens/Internal/FieldTH.hs
index 968c01e..7c7c88e 100644
--- a/src/Control/Lens/Internal/FieldTH.hs
+++ b/src/Control/Lens/Internal/FieldTH.hs
@@ -369,7 +369,7 @@ makeClassyClass className methodName s defs = do
            | otherwise = [FunDep [c] varNames]
 
 
-  classD (cxt[]) className (D.plainTV c:vars) fd
+  classD (cxt[]) className (D.plainTV c : D.changeTVFlags D.defaultBndrFlag vars) fd
     $ sigD methodName (return (lens'TypeName `conAppsT` [VarT c, s']))
     : concat
       [ [sigD defName (return ty)
diff --git a/src/Control/Lens/Internal/PrismTH.hs b/src/Control/Lens/Internal/PrismTH.hs
index 37b5ec5..23e0b08 100644
--- a/src/Control/Lens/Internal/PrismTH.hs
+++ b/src/Control/Lens/Internal/PrismTH.hs
@@ -415,7 +415,7 @@ makeClassyPrismClass t className methodName cons =
   do r <- newName "r"
      let methodType = appsT (conT prism'TypeName) [varT r,return t]
      methodss <- traverse (mkMethod r) cons'
-     classD (cxt[]) className (D.plainTV r : vs) (fds r)
+     classD (cxt[]) className (D.plainTV r : D.changeTVFlags D.defaultBndrFlag vs) (fds r)
        ( sigD methodName methodType
        : map return (concat methodss)
        )
diff --git a/src/Language/Haskell/TH/Lens.hs b/src/Language/Haskell/TH/Lens.hs
index 25282be..1567a77 100644
--- a/src/Language/Haskell/TH/Lens.hs
+++ b/src/Language/Haskell/TH/Lens.hs
@@ -759,7 +759,7 @@ typeFamilyHeadName = lens g s where
   g (TypeFamilyHead n _    _  _ )   = n
   s (TypeFamilyHead _ tvbs rs ia) n = TypeFamilyHead n tvbs rs ia
 
-typeFamilyHeadTyVarBndrs :: Lens' TypeFamilyHead [TyVarBndrUnit]
+typeFamilyHeadTyVarBndrs :: Lens' TypeFamilyHead [TyVarBndrVis]
 typeFamilyHeadTyVarBndrs = lens g s where
   g (TypeFamilyHead _ tvbs _  _ )      = tvbs
   s (TypeFamilyHead n _    rs ia) tvbs = TypeFamilyHead n tvbs rs ia
@@ -886,7 +886,7 @@ _ValD
       remitter (ValD x y z) = Just (x, y, z)
       remitter _ = Nothing
 
-_TySynD :: Prism' Dec (Name, [TyVarBndrUnit], Type)
+_TySynD :: Prism' Dec (Name, [TyVarBndrVis], Type)
 _TySynD
   = prism' reviewer remitter
   where
@@ -894,7 +894,7 @@ _TySynD
       remitter (TySynD x y z) = Just (x, y, z)
       remitter _ = Nothing
 
-_ClassD :: Prism' Dec (Cxt, Name, [TyVarBndrUnit], [FunDep], [Dec])
+_ClassD :: Prism' Dec (Cxt, Name, [TyVarBndrVis], [FunDep], [Dec])
 _ClassD
   = prism' reviewer remitter
   where
@@ -1100,7 +1100,7 @@ _ClosedTypeFamilyD
 -- _DataD :: 'Prism'' 'Dec' ('Cxt', 'Name', ['TyVarBndrUnit'], 'Maybe' 'Kind', ['Con'], ['DerivClause']) -- template-haskell-2.12+
 -- _DataD :: 'Prism'' 'Dec' ('Cxt', 'Name', ['Type'],          'Maybe' 'Kind', ['Con'], 'Cxt')           -- Earlier versions
 -- @
-_DataD :: DataPrism' [TyVarBndrUnit] [Con]
+_DataD :: DataPrism' [TyVarBndrVis] [Con]
 _DataD
   = prism' reviewer remitter
   where
@@ -1113,7 +1113,7 @@ _DataD
 -- _NewtypeD :: 'Prism'' 'Dec' ('Cxt', 'Name', ['TyVarBndrUnit'], 'Maybe' 'Kind', 'Con', ['DerivClause']) -- template-haskell-2.12+
 -- _NewtypeD :: 'Prism'' 'Dec' ('Cxt', 'Name', ['Type'],          'Maybe' 'Kind', 'Con', 'Cxt')           -- Earlier versions
 -- @
-_NewtypeD :: DataPrism' [TyVarBndrUnit] Con
+_NewtypeD :: DataPrism' [TyVarBndrVis] Con
 _NewtypeD
   = prism' reviewer remitter
   where
@@ -1121,7 +1121,7 @@ _NewtypeD
       remitter (NewtypeD x y z w u v) = Just (x, y, z, w, u, v)
       remitter _ = Nothing
 
-_DataFamilyD :: Prism' Dec (Name, [TyVarBndrUnit], Maybe Kind)
+_DataFamilyD :: Prism' Dec (Name, [TyVarBndrVis], Maybe Kind)
 _DataFamilyD
   = prism' reviewer remitter
   where
@@ -1176,7 +1176,7 @@ _DefaultD
 #endif
 
 #if MIN_VERSION_template_haskell(2,20,0)
-_TypeDataD :: Prism' Dec (Name, [TyVarBndr ()], Maybe Kind, [Con])
+_TypeDataD :: Prism' Dec (Name, [TyVarBndrVis], Maybe Kind, [Con])
 _TypeDataD
   = prism' reviewer remitter
   where
